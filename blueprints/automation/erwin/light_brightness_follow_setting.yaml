blueprint:
  name: Light Brightness Follow Setting
  description: Let a light entity follow the brightness settings of a number entity, allowing an override for a set time.
  domain: automation
  author: Erwin Everts
  input:
    light_entity:
      name: Light entity
      selector:
        entity:
          domain: light
    brightness_number_entity:
      name: Brightness number entity
      description: Number entity that controls brightness (0-100 percentage)
      selector:
        entity:
          domain: 
            - input_number
            - number
            - sensor
    reset_time:
      name: Reset time in minutes
      description: Reset to follow mode after manual override.
      default: 02:00:00
      selector:
        duration:
    reset_timer:
      name: Reset timer
      description: Timer to use for the reset timeout.
      selector:
        entity:
          filter:
            domain:
              - timer
mode: queued
max: 3

variables:
  brightness_wanted: !input brightness_number_entity
  light: !input light_entity

triggers:
  - entity_id: !input brightness_number_entity
    to: null
    id: desired_changed
    trigger: state
  - entity_id: !input light_entity
    attribute: brightness
    id: actual_changed
    trigger: state
  - trigger: state
    entity_id: !input reset_timer
    to: idle
    id: reset_timer

conditions:
  - condition: or
    conditions:
      - condition: and
        conditions:
          - condition: trigger
            id:
              - desired_changed
          - condition: not
            conditions:
              - condition: state
                entity_id: !input reset_timer
                state: active
      - condition: trigger
        id:
          - actual_changed
          - reset_timer

actions:
  - choose:
      - conditions:
          - condition: trigger
            id: desired_changed
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ states[brightness_wanted].state | int == 0 }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light_entity
            default:
              - service: light.turn_on
                target:
                  entity_id: !input light_entity
                data:
                  brightness: "{{ (states[brightness_wanted].state | float * 2.55) | round(0) | int }}"
      - conditions:
          - condition: trigger
            id: actual_changed
        sequence:
          - if: >
              {% set wanted_brightness = (states[brightness_wanted].state | float * 2.55) | round(0) | int %}
              {% set current_brightness = state_attr(trigger.entity_id, 'brightness') | int(0) %}
              {{ wanted_brightness != current_brightness }}
            then:
              - service: timer.start
                target:
                  entity_id: !input reset_timer
                data: 
                  duration: !input reset_time
            else:
              - service: timer.cancel
                target:
                  entity_id: !input reset_timer
      - conditions:
          - condition: trigger
            id: reset_timer
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ states[brightness_wanted].state | int == 0 }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light_entity
            default:
              - service: light.turn_on
                target:
                  entity_id: !input light_entity
                data:
                  brightness: "{{ (states[brightness_wanted].state | float * 2.55) | round(0) | int }}"
